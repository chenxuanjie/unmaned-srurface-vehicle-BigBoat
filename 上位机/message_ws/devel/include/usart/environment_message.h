// Generated by gencpp from file usart/environment_message.msg
// DO NOT EDIT!


#ifndef USART_MESSAGE_ENVIRONMENT_MESSAGE_H
#define USART_MESSAGE_ENVIRONMENT_MESSAGE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace usart
{
template <class ContainerAllocator>
struct environment_message_
{
  typedef environment_message_<ContainerAllocator> Type;

  environment_message_()
    : voltage_left_battery(0.0)
    , voltage_right_battery(0.0)
    , temperature(0.0)  {
    }
  environment_message_(const ContainerAllocator& _alloc)
    : voltage_left_battery(0.0)
    , voltage_right_battery(0.0)
    , temperature(0.0)  {
  (void)_alloc;
    }



   typedef double _voltage_left_battery_type;
  _voltage_left_battery_type voltage_left_battery;

   typedef double _voltage_right_battery_type;
  _voltage_right_battery_type voltage_right_battery;

   typedef double _temperature_type;
  _temperature_type temperature;





  typedef boost::shared_ptr< ::usart::environment_message_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::usart::environment_message_<ContainerAllocator> const> ConstPtr;

}; // struct environment_message_

typedef ::usart::environment_message_<std::allocator<void> > environment_message;

typedef boost::shared_ptr< ::usart::environment_message > environment_messagePtr;
typedef boost::shared_ptr< ::usart::environment_message const> environment_messageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::usart::environment_message_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::usart::environment_message_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::usart::environment_message_<ContainerAllocator1> & lhs, const ::usart::environment_message_<ContainerAllocator2> & rhs)
{
  return lhs.voltage_left_battery == rhs.voltage_left_battery &&
    lhs.voltage_right_battery == rhs.voltage_right_battery &&
    lhs.temperature == rhs.temperature;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::usart::environment_message_<ContainerAllocator1> & lhs, const ::usart::environment_message_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace usart

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::usart::environment_message_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::usart::environment_message_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::usart::environment_message_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::usart::environment_message_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::usart::environment_message_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::usart::environment_message_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::usart::environment_message_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4be2f61eda002ec29f7656590853bb61";
  }

  static const char* value(const ::usart::environment_message_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4be2f61eda002ec2ULL;
  static const uint64_t static_value2 = 0x9f7656590853bb61ULL;
};

template<class ContainerAllocator>
struct DataType< ::usart::environment_message_<ContainerAllocator> >
{
  static const char* value()
  {
    return "usart/environment_message";
  }

  static const char* value(const ::usart::environment_message_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::usart::environment_message_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 voltage_left_battery\n"
"float64 voltage_right_battery\n"
"float64 temperature\n"
;
  }

  static const char* value(const ::usart::environment_message_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::usart::environment_message_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.voltage_left_battery);
      stream.next(m.voltage_right_battery);
      stream.next(m.temperature);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct environment_message_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::usart::environment_message_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::usart::environment_message_<ContainerAllocator>& v)
  {
    s << indent << "voltage_left_battery: ";
    Printer<double>::stream(s, indent + "  ", v.voltage_left_battery);
    s << indent << "voltage_right_battery: ";
    Printer<double>::stream(s, indent + "  ", v.voltage_right_battery);
    s << indent << "temperature: ";
    Printer<double>::stream(s, indent + "  ", v.temperature);
  }
};

} // namespace message_operations
} // namespace ros

#endif // USART_MESSAGE_ENVIRONMENT_MESSAGE_H
